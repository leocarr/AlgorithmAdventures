# This library is based upon the library tkinter, Created by Fredrik Lundh.

import math
import string
import sys
from collections import namedtuple
try:
	import tkinter as tk  # May have to change this later to detect if tkinter is available
except ImportError:
	raise ImportError('tkinter not found, try installing python with tkinter')

if tk.TkVersion != 8.6:
	print('tkinter version is different from intended, this may cause some features to not work or break')

# GLOBALS
ICON = b''
ID = 'lucid.lucidwindow'

if sys.platform == 'nt':  # Checks if on windows
	import ctypes
	ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(ID)  # Lets the icon be displayed on the taskbar

# Custom menu item tuple
MenuItem = namedtuple('MenuItem', ['label', 'command'])


class LucidError(Exception):
	"""Base class for all exceptions"""
	pass


# Initialize a "controlling window"
_master = tk.Tk()
_master.withdraw()	# Hide it for background control


class Window(tk.Canvas):
	"""Class to manage window related actions """

	def __init__(self, title='Lucid Window', width=500, height=500, autodraw=True, icon=ICON):
		# Set some tkinter based variables
		self.master = tk.Toplevel(_master)
		self.master.title(title)
		self.master.resizable(0, 0)
		self.master.tk.call('wm', 'iconphoto', self.master._w, tk.PhotoImage(data=icon))

		# try to set the icon from the provided data
		try:
			tk.Canvas.__init__(self, self.master, width=width, height=height, highlightthickness=0)
		except tk.TclError:
			raise LucidError("Image data of the given icon is invalid/corrupt")

		# display the canvas on the window
		self.pack()
		self.autodraw = autodraw
		#EVAL added by FD to (approx) centre the Toplevel
		_master.eval(f'tk::PlaceWindow {str(self.master)} center')
		# management of the "X" button (closing)
		self.master.protocol('WM_DELETE_WINDOW', self._on_close)
		self.master.bind('<Destroy>', self._on_close)  # hopefully fix closing

		# start the event handler
		self.EventHandler = EventHandler(self)
		self.images = []
		self.menu = Menu(self)

	def setup_menu(self):
		"""function to be called to enable the menu"""
		self.menu.drawn = True
		self.master.config(menu=self.menu)

	def on_close(self):
		"""Stub to manage the closing of the window - should be modifiable by the user"""
		pass

	def _on_close(self, *args):
		"""runs the user-defined close function, then closes then window"""
		self.on_close()
		self.master.destroy()
		sys.exit()	# Actually closes the window now

	@property
	def bg(self):
		"""returns the background colour"""
		return self.cget('bg')

	@bg.setter
	def bg(self, colour):
		"""Changes the background colour to the colour specified

		supported named colours: http://www.science.smith.edu/dftwiki/index.php/Color_Charts_for_TKinter

		:param colour: The colour to be changed to - accepts all tkinter colours, hex, and conversions from rgb
		:type colour: string
		"""
		self.config(bg=colour)

	def bind_key(self, key, func):
		"""binds the provided key to the provided function. The function must have an argument for an event"""
		if key in self.EventHandler.bindings.keys():
			self.EventHandler.bindings[key] = func
			# TODO somehow get arguments without lambda
		else:
			raise LucidError('Key not found in bindings dir: {}'.format(key))

	def get_mouse(self):
		"""Returns the current cursor position based on the window
		:return: (x, y) position of mouse
		:rtype: tuple
		"""
		x = self.winfo_pointerx() - self.winfo_rootx()
		y = self.winfo_pointery() - self.winfo_rooty()
		return x, y

	def clear(self):
		self.delete("all")
		print("cleared?")
	# TODO look at making a Coords and Bbox named tuple for ease


class Menu(tk.Menu):
	current_menu = None

	def __init__(self, master):
		"""Initalise the main menu controller"""
		tk.Menu.__init__(self, master)

		self.submenus = {}

		self.current_menu = self
		self.drawn = False

	def add_submenu(self, name, menulist):
		"""Add a submenu with the preffered name as a label"""
		if self.drawn:
			submenu = self._create_submenu()
			for item in menulist:
				if isinstance(item, MenuItem):
					submenu.add_command(label=item.label, command=item.command)
				else:
					submenu.add_separator()
			self.submenus[name] = submenu
			self.add_cascade(label=name, menu=submenu)
		else:
			raise LucidError('Menu not initalised, please call setup_menu() on the window to use menus')

	def _create_submenu(self):
		"""internal method that creates a submenu"""
		return tk.Menu(self.current_menu, tearoff=0)


class EventHandler:
	"""Class to manage both key and mouse events"""
	bindings = {}  # Dictionary to store all bindings

	def __init__(self, window):
		self.latest = None	# Stores the latest event

		self.initialize_bindings()
		window.bind_all('<Key>', self.new_event)
		window.bind_all('<MouseWheel>', self.new_event)	 # Mouse wheel

		for i in range(1, 4):
			# bind each mouse button
			window.bind_all('<Button-{}>'.format(i), self.new_event)  # Mouse click
			window.bind_all('<B{}-Motion>'.format(i), self.new_event)  # Mouse motion with button held down
			window.bind_all('<ButtonRelease-{}>'.format(i), self.new_event)	 # Mouse release

			# TODO add scroll wheel functionality

			# window.bind_all(f'<Double-Button-{i}>', self.new_event)
			# window.bind_all(f'<Triple-Button-{i}>', self.new_event)

	def initialize_bindings(self):
		"""function to setup bindings to most keys"""
		for char in string.ascii_letters:  # includes upper and lower
			self.bindings[char] = Event(char)
		for sym in string.punctuation:
			self.bindings[sym] = Event(sym)
		for num in range(0, 10):  # 0~9
			self.bindings[str(num)] = Event(num)
		for arrow in ['Up', 'Down', 'Left', 'Right']:  # Arrow keys
			self.bindings[arrow] = Event(arrow)
		for key in ['space', 'BackSpace', 'Return', 'Shift_L', 'Shift_R']:
			self.bindings[key] = Event(key)

		# TODO get a better way to do this

	def new_event(self, event):
		"""function that handles when an event is created"""
		try:
			self.bindings[event.keysym](event)
			self.latest = event
		except KeyError:
			Exception('Key not in bindings dir')

	def get(self):
		"""returns latest event"""
		return self.latest


class Event:
	"""Class to manage an event happening"""

	def __init__(self, sym):
		self.func = None

	def __call__(self, event):
		"""call the bound event if there is one"""
		try:
			self.func(event)
		except TypeError:
			pass
		# finally:
		#	  print(f'key: {event.keysym}, state: {event.state}, coords: {event.x, event.y}')

	# TODO check redundancy with the handler


class Object:
	"""Class to manage base level attributes and commands of all objects """

	# TODO fix weird glitch where some parts of the shape don't draw if updated too quickly (about 40+ fps)
	# ^^^ I'm assuming its to do with the refresh rate of the monitor
	def __init__(self, window, x, y, width, height, options=None):
		"""
		:param window: window to bind the object to
		:type window: lucid.Window
		:param x: x coordinate of the object (from the top left corner)
		:type x: int/float
		:param y: y coordinate of the object (from the top left corner)
		:type y: int/float
		:param width: width of the object
		:type width: int/float
		:param height: height of the object
		:type height: int/float
		"""
		self.window = window
		self.id = None	# assigned on creation
		self.debug_tag = None  # assigned to objects related to debugging

		self.properties = {
			'x': x,
			'y': y,
			'cx': x + (width / 2),
			'cy': y + (height / 2),
			'width': width,
			'height': height,
		}

		self.options = {
			'fill': '',	 # Empty string is transparent
			'outline': 'black',
			'width': 1,	 # this is outline thickness
			'smooth': False,
		}

		self.rotation = 0  # recorded in degrees
		self.precision = 4	# number of points that make up the shape

		if options: self.options.update(options)

		# Coordinates for all points of the shape
		self.points = self.generate_points()

		if window.autodraw: self.draw()

	def _updatecenter(self):
		"""updates the center point of the shape in the properties"""
		self.properties['cx'] = self.x + (self.width / 2)
		self.properties['cy'] = self.y + (self.height / 2)

	# This is how the option setting would work
	def _optionset(self, option, value):
		"""update the option of the object, and displays it instantly if drawn"""
		self.options[option] = value
		if self.is_drawn:  # only change it immediately if the object is drawn
			self.window.itemconfigure(self.id, {option: value})

	def _propertyset(self):
		"""sets a new property for the object, and shows it if drawn"""
		if self.is_drawn:
			if self.debug_tag:
				self.window.coords(self.debug_tag, *self.window.bbox(self.id))
			self.points = self.generate_points()
			if self.rotation:
				self.rotate_to(self.rotation)  # allows the shape to keep rotation - this causes the center point to change however (is this a bug?)
			if not self.rotation:
				self._updatecenter()  # only lets the center point change when rotation is 0
			self.window.coords(self.id, self.convert_points_line())

	@property
	def fill(self):
		"""fill colour of the object"""
		return self.options['fill']

	@fill.setter
	def fill(self, value):
		self._optionset('fill', value)

	@property
	def outline(self):
		"""outline colour of the object"""
		return self.options['outline']

	@outline.setter
	def outline(self, value):
		self._optionset('outline', value)

	@property
	def thickness(self):
		"""line thickness of the outline"""
		return self.options['width']

	@thickness.setter
	def thickness(self, value):
		self._optionset('width', value)

	@property
	def x(self):
		"""current x value of the object"""
		return self.properties['x']

	@x.setter
	def x(self, value):
		self.properties['x'] = value
		self._propertyset()

	@property
	def y(self):
		"""current y value of the shape"""
		return self.properties['y']

	@y.setter
	def y(self, value):
		self.properties['y'] = value
		self._propertyset()

	@property
	def cx(self):
		"""current center x value of the object"""
		return self.properties['cx']

	@property
	def cy(self):
		"""current center y value of the object"""
		return self.properties['cy']

	@property
	def width(self):
		"""current width of the object"""
		return self.properties['width']

	@width.setter
	def width(self, value):
		self.properties['width'] = value
		self._propertyset()

	@property
	def height(self):
		"""current height of the project"""
		return self.properties['height']

	@height.setter
	def height(self, value):
		self.properties['height'] = value
		self._propertyset()

	def generate_points(self):
		# Converts xywh to (x1 y1) (x2 y2) ... (tk polygon format)
		default = [(self.x, self.y),
				   (self.x + self.width, self.y),
				   (self.x + self.width, self.y + self.height),
				   (self.x, self.y + self.height)]

		if self.precision > 4:
			return self.generate_curve_points()
		else:
			return default

	def convert_points(self):
		# converts points from x1 y1 x2 y2 to (x1, y1) (x2, y2) ...
		self.points = [(self.points[i], self.points[i + 1]) for i in range(0, len(self.points), 2)]

	def convert_points_line(self):
		""" converts points from (x1, y1) (x2, y2) to x1 y1 x2 y2 """
		out = []
		for point in self.points:
			out.append(point[0])
			out.append(point[1])
		return out

	def generate_curve_points(self):
		""" function to generate circles and ovals from a bbox"""

		# major and minor axes
		a = self.width / 2
		b = self.height / 2

		point_list = []

		for i in range(self.precision):
			theta = (math.pi * 2) * (float(i) / self.precision)

			x = a * math.cos(theta)
			y = b * math.sin(theta)

			point_list.append((round(x + self.cx), round(y + self.cy)))

		return point_list

	def _rotate(self):
		"""internal command to control rotations - shared by rotate and rotate_to

			made with help from: https://stackoverflow.com/questions/2259476/rotating-a-point-about-another-point-2d"""

		# make it so the current object rotation is within 0-360 degrees
		if self.rotation >= 360:
			self.rotation %= 360
		elif self.rotation < 0:
			self.rotation += 360

		# Convert the angle into radians? for math stuff
		theta = self.rotation * math.pi / 180.0	 # fixed bug where self.rotation was being used instead of angle

		new_points = []
		self.points = self.generate_points()  # Resets the object back to default, to allow more precise rotates

		for (px, py) in self.points:
			# move object point back to origin
			px -= self.cx
			py -= self.cy

			# rotate point
			x = (px * math.cos(theta)) - (py * math.sin(theta))
			y = (py * math.cos(theta)) + (px * math.sin(theta))

			new_points.append(x + self.cx)
			new_points.append(y + self.cy)

		self.points = new_points

		if self.is_drawn:
			self.window.coords(self.id, self.points)

		self.convert_points()

	def rotate_to(self, angle):
		"""Rotates the object to the defined angle"""
		self.rotation = angle

		self._rotate()

	def rotate(self, angle):
		"""Rotates the object (from its center) by the amount of degrees (angle) specified """
		self.rotation += angle

		self._rotate()

	# basic polygon drawing - overridden in non-poly objects
	def _draw(self):
		return Window.create_polygon(self.window, self.points, self.options)

	def draw(self):
		"""Draws the shape to the current window - nothing happens if it is already drawn"""
		if not self.is_drawn:
			self.id = self._draw()
			_master.update()

	def undraw(self):
		"""Hides the object for drawing later """
		if self.is_drawn:
			self.window.delete(self.id)
			if self.debug_tag:
				self.window.delete(self.debug_tag)
			self.id = None
			self.debug_tag = None  # Reset the object's id and tag as it no longer exists in the window
			_master.update()

	def draw_points(self):
		"""draws a degubbing bounding box and points of the shape"""
		if self.debug_tag is None:
			self.debug_tag = '{}_debug'.format(self.id)	 # create a debug tag if it doesn't exist yet

		# debug function that shows points of object as red and border box as green
		Window.create_rectangle(self.window, self.x, self.y, self.x + self.width, self.y + self.height, outline='green',
								width=1, tag=self.debug_tag)
		for x, y in self.points:
			Window.create_line(self.window, x, y, x + 1, y + 1, width=5, fill='red', tag=self.debug_tag)

	@property
	def is_drawn(self):
		"""returns True if the object is currently drawn"""
		if self.id:
			return True
		else:
			return False

	# this function is broken since updates to properties - probably dont need it anyway
	# def move(self, x, y):
	#	  if self.is_drawn:
	#		  self.x += x
	#		  self.y += y
	#		  print(self.x, self.y)
	#		  if self.debug_tag:
	#			  self.window.move(self.debug_tag, x, y)
	#		  self.window.move(self.id, self.x, self.y)
	#	  else:
	#		  raise LucidError('Object not currently drawn')

	def __repr__(self):
		return "Object {}".format(self.__class__)

	# def collideswith(self, obj2):
	#	  if Object in obj2.__class__.__mro__:
	#		  a = self.window.bbox(self.id)
	#		  b = self.window.bbox(obj2.id)
	#		  print(self.check_intersect(a, b))
	#	  else:
	#		  raise LucidError(obj2.__class__, 'is not a lucid.Object')
	#
	# @staticmethod
	# def check_intersect(a, b):
	#	  denom = ((a[2] - a[0]) * (b[3] - b[1])) - ((a[3] - a[1]) * (b[2] - b[0]))
	#	  num1 = ((a[0] - b[1]) * (b[2] - b[0])) - ((a[0] - b[0]) * (b[3] - b[1]))
	#	  num2 = ((a[1] - b[1]) * (a[2] - a[0])) - ((a[0 - b[0]]) * (a[3] - a[1]))
	#
	#	  if denom == 0:
	#		  return  num1 == 0 and num2 == 0
	#
	#	  r = num1 / denom
	#	  s = num2 / denom
	#
	#	  return (r >= 0 and r <= 1) and (s >= 0 and s <= 1)


class Line(Object):
	"""Creates a straight line that starts from (x1, y1) and ends at (x2, y2) """

	def __init__(self, window, x1, y1, x2, y2):
		Object.__init__(self, window, x1, y1, x2 - x1, y2 - y1)	 # convert to xywh

	def _draw(self):
		return Window.create_line(self.window, self.x, self.y, self.x + self.width, self.y + self.height)

class Polygon(Object):
	"""Creates a polygon from a list of given points """

	def __init__(self, window, points,options=None):
		self.window = window
		self.id = None	# assigned on creation
		self.debug_tag = None  # assigned to objects related to debugging

		self.options = {
			'fill': '',	 # Empty string is transparent
			'outline': 'black',
			'width': 1,	 # this is outline thickness
			'smooth': False,
		}

		self.rotation = 0  # recorded in degrees
		self.precision = len(points)	# number of points that make up the shape

		if options: self.options.update(options)

		# Coordinates for all points of the shape
		self.points = points

		if window.autodraw: self.draw()	

	def _draw(self):
		return Window.create_polygon(self.window, self.points, self.options)


class Rectangle(Object):
	"""Creates a rectangle that starts from (x,y) and is width long and height high"""

	def __init__(self, window, x, y, width, height):
		Object.__init__(self, window, x, y, width, height)


class Circle(Object):
	"""Creates a circle using (x,y) as the center point, that spreads radius outwards"""

	# TODO maybe make it also availble to put in bounding box?
	# TODO make a functiom that returns a bbox from a center point

	def __init__(self, window, x, y, radius, **options):
		if options:
			options.update({'smooth': True})
		else:
			options = {'smooth': True}
		Object.__init__(self, window, float(x) - radius, float(y) - radius, radius * 2, radius * 2, options=options)
		self.precision = 30	 # Makes the circle more rounded
		self.rotate(0)
		# TODO make this more efficient


class Oval(Object):
	"""Creates an oval based on a defined box, which starts at (x,y) and is width long and height high"""

	def __init__(self, window, x, y, width, height, **options):
		if options:
			options.update({'smooth': True})
		else:
			options = {'smooth': True}
		Object.__init__(self, window, x, y, width, height, options=options)
		self.precision = 20
		self.rotate(0)


class Text(Object):
	"""Creates a text object, centered on (x,y)"""

	def __init__(self, window, x, y, text,font=None):
		if font:
			self.font=font
		else:
			self.font=("Arial", 14, "normal")
		self.text = text
		Object.__init__(self, window, x, y, width=0, height=0)

	def _draw(self):
		return self.window.create_text(self.x, self.y, text=self.text, justify=tk.CENTER, font=self.font)

	def setProperties(self,font=None,fg=None):
		if font:
			self.font=font
			self.window.itemconfigure(self.id, font=font)
		if fg:
			self.fg = fg
			self.window.itemconfigure(self.id,fill=fg)
	
	def setText(self, text=''):
		"""changes the displayed text of the text object"""
		if not text:
			self.text = text  # fixed bug where "text = self.text" was wrong way around
		self.window.itemconfigure(self.id, text=text)


class Button(Object):
	"""Creates a button, centered on (x,y)"""

	def __init__(self, window, x, y, text, width=0, height=0, command=None, font=None):
		self.text = tk.StringVar(_master, text)
		self.command = command
		self.bg = "light gray"
		if font:
			self.font=font
		else:
			self.font=("Arial", 14, "normal")
		Object.__init__(self, window, x, y, width, height)
	
	def setProperties(self,bg=None,font=None,fg=None):
		if bg:
			self.bg = bg
			self.button.configure(bg=bg)
		if font:
			self.font=font
			self.button.configure(font=font)
		if fg:
			self.bg = bg
			self.button.configure(fg=fg)
		
	
	def _draw(self):
		if self.width and self.height:	# If custom width and height are defined
			frame = tk.Frame(self.window.master, width=self.width, height=self.height)
			frame.pack_propagate(0)
		else:
			frame = tk.Frame(self.window.master)

		self.button = tk.Button(frame, textvariable=self.text, font=self.font, bg=self.bg, command=self.command)
		self.button.pack(fill=tk.BOTH, expand=1)
		return self.window.create_window(self.x, self.y, window=frame)


class Entry(Object):
	"""Creates an entry box, which text and numbers can be entered into"""

	def __init__(self, window, x, y, width, placeholder=''):
		self.text = tk.StringVar(_master, placeholder)
		Object.__init__(self, window, x, y, width, height=0)

	def _draw(self):
		frame = tk.Frame(self.window.master)
		self.entry = tk.Entry(frame, width=self.width, textvariable=self.text)
		self.entry.pack()
		return self.window.create_window(self.x, self.y, window=frame)

	def setProperties(self,bg=None,font=None,fg=None):
		if bg:
			self.bg = bg
			self.entry.configure(bg=bg)
		if font:
			self.font=font
			self.entry.configure(font=font)
		if fg:
			self.bg = bg
			self.entry.configure(fg=fg)
	
	def getText(self):
		return self.text.get()
		
	def setText(self, txt):
		self.text.set(txt)

class DropDown(Object):
	"""Creates a dropdown menu, which has an option set and the name of a function"""
	def __init__(self, window, x, y, optionSet, width=10,height=2,command=None):
		self.default = tk.StringVar()
		self.default.set(optionSet[0])
		self.optionList = optionSet
		self.command = command
		Object.__init__(self, window, x, y, width, height)

	def _draw(self):
		frame = tk.Frame(self.window.master)
		self.drop = tk.OptionMenu(frame, self.default, *self.optionList, command=self.command)
		self.drop.config(width=self.width)
		self.drop.config(height=self.height)
		self.drop["borderwidth"]=2
		self.drop.pack()
		return self.window.create_window(self.x, self.y, window=frame)

	def setProperties(self,bg=None,font=None,fg=None):
		if bg:
			self.bg = bg
			self.drop.configure(bg=bg)
		if font:
			self.font=font
			self.drop.configure(font=font)
			menu = self.window.master.nametowidget(self.drop.menuname)
			menu.config(font=font)
		if fg:
			self.bg = bg
			self.drop.configure(fg=fg)

	def getValue(self):
		return self.default.get()


class CheckBox(Object):
	"""Creates a checkbutton, which can have an on/off state, and a label"""

	def __init__(self, window, x, y, text, command=None):
		self.text = text
		self.var = tk.BooleanVar()	# var used to store checkbox state (on/off)
		self.command = command
		Object.__init__(self, window, x, y, 0, 0)

	def _draw(self):
		frame = tk.Frame(self.window.master)
		# TODO make the bg transparent
		self.button = tk.Checkbutton(frame, text=self.text, command=self.command, variable=self.var)
		self.button.pack()
		return self.window.create_window(self.x, self.y, window=frame)


class Image(Object):
	"""Class to manage images

		Only works with PNG, GIF, and PGM/PPM formats currently
	"""

	def __init__(self, window, x, y, filename):
		self.image = tk.PhotoImage(file=filename)
		Object.__init__(self, window, x, y, 0, 0)
		self.index = len(window.images)
		self.window.images.append(self.image)
		self.cenx = x
		self.ceny = y

	def _draw(self):
		self.obj = self.window.create_image(self.x, self.y, image=self.image)
		return self.obj
		
	def move(self,x,y):
		self.window.move(self.obj,x,y)
		self.cenx += x
		self.ceny += y
		
	def getXY(self):
		return self.cenx, self.ceny

def rgb(red, green, blue):
	"""Helper function to convert an rgb colour to hex (so tkinter can understand it)
	:param red: amount of red
	:type red: int
	:param green: amount of green
	:type green: int
	:param blue: amount of blue
	:type blue: int
	:return: hex string
	"""
	color = (red, green, blue)
	for c in color:
		if not 0 <= c <= 255:  # checks that the values fall within the range 0-255
			raise ValueError('Value {} not within 0-255'.format(c))

	return '#{:02x}{:02x}{:02x}'.format(red, green, blue)

# TODO Implement listboxes, radiobuttons (maybe)
